defmodule Helpdesk.Repo.Migrations.AddTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    create table(:user_tickets, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:ticket_id, :uuid, null: false, primary_key: true)
      add(:user_id, :uuid, null: false, primary_key: true)
    end

    create table(:tickets, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:user_tickets) do
      modify(
        :ticket_id,
        references(:tickets,
          column: :id,
          name: "user_tickets_ticket_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :user_id,
        references(:users,
          column: :id,
          name: "user_tickets_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create table(:projects, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    create table(:project_users, primary_key: false) do
      add(
        :user_id,
        references(:users,
          column: :id,
          name: "project_users_user_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        primary_key: true,
        null: false
      )

      add(
        :project_id,
        references(:projects,
          column: :id,
          name: "project_users_project_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        primary_key: true,
        null: false
      )
    end

    create table(:project_tickets, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :ticket_id,
        references(:tickets,
          column: :id,
          name: "project_tickets_ticket_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(
        :project_id,
        references(:projects,
          column: :id,
          name: "project_tickets_project_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )
    end
  end

  def down do
    drop(constraint(:project_tickets, "project_tickets_ticket_id_fkey"))

    drop(constraint(:project_tickets, "project_tickets_project_id_fkey"))

    drop(table(:project_tickets))

    drop(constraint(:project_users, "project_users_user_id_fkey"))

    drop(constraint(:project_users, "project_users_project_id_fkey"))

    drop(table(:project_users))

    drop(table(:projects))

    drop(constraint(:user_tickets, "user_tickets_ticket_id_fkey"))

    drop(constraint(:user_tickets, "user_tickets_user_id_fkey"))

    alter table(:user_tickets) do
      modify(:user_id, :uuid)
      modify(:ticket_id, :uuid)
    end

    drop(table(:tickets))

    drop(table(:user_tickets))

    drop(table(:users))
  end
end
